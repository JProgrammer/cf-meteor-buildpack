#!/bin/bash

set -e

BUILD_DIR=$1
CACHE_DIR=$2
METEOR_HOME=$BUILD_DIR/.meteor/local
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";; # mac/bsd sed: -l buffers on line boundaries
    *)      sed -u "$c";; # unix/gnu sed: -u unbuffered (arbitrary) chunks of data
  esac
}

status() {
  echo "-----> $*"
}

APP_RELEASE=`cat "$BUILD_DIR/.meteor/release" | sed -e 's/METEOR@//'`

# Where we will install meteor. Has to be outside the APP_CHECKOUT_DIR.
METEOR_DIR="$CACHE_DIR/$APP_RELEASE"
# Where we'll put things we compile.
COMPILE_DIR_SUFFIX=".meteor/cf_build"
COMPILE_DIR="$BUILD_DIR"/"$COMPILE_DIR_SUFFIX"

# Create directories as needed.
mkdir -p "$BUILD_DIR" "$METEOR_DIR"
mkdir -p "$COMPILE_DIR" "$COMPILE_DIR/bin" "$COMPILE_DIR/lib"

status "Found Meteor APP version $APP_RELEASE"

#
# Install meteor
#

if [ ! -e "$METEOR_DIR/.meteor/meteor" ]; then
  status "Installing meteor"
  curl -sS "https://install.meteor.com/?release=$APP_RELEASE" | HOME="$METEOR_DIR" /bin/sh
fi

METEOR="$METEOR_DIR/.meteor/meteor" # The meteor binary.

status "Meteor version: `$METEOR --version`"

#
# Build the meteor app!
#
cd "$BUILD_DIR"

# Determine if we have --server-only flag capability. Allow non-zero return from grep.
status "Checking if this meteor version supports --server-only"
set +e
HAS_SERVER_ONLY=`HOME=$METEOR_DIR $METEOR help build | grep -e '--server-only'`
set -e
if [ -n "$HAS_SERVER_ONLY" ] ; then
  SERVER_ONLY_FLAG='--server-only'
else
  SERVER_ONLY_FLAG=""
fi

METEOR_NPM=`find $METEOR_DIR -wholename "*/dev_bundle/bin/npm"`
METEOR_NODE=`find $METEOR_DIR -wholename "*/dev_bundle/bin/node"`
# Trim whitespace
METEOR_NPM=`echo "$METEOR_NPM" | sed -e 's/[[:space:]]*$//'`
METEOR_NODE=`echo "$METEOR_NODE" | sed -e 's/[[:space:]]*$//'`
if [ -z "$METEOR_NPM" ] || [ -z "$METEOR_NODE" ] ; then
  echo "FATAL: Can't find npm/node within meteor bundle. This is a bug. Please open an issue at https://github.com/AdmitHub/meteor-buildpack-horse.";
  exit 1
fi

# Copy node into place for production.
NODE="$COMPILE_DIR"/bin/node
cp "$METEOR_NODE" "$NODE"
chmod a+x "$NODE"

# Add npm and node path so that 1.4's npm-rebuild.js will function.
PATH="$METEOR_DIR/.meteor:`dirname $METEOR_NPM`:$COMPILE_DIR/bin:$PATH"

status "Using node: `$NODE --version`"
status "    and npm: `$METEOR_NPM --version`"

# If we use npm on root, run npm install.  Don't use `--production` here, as we
# may need devDependencies (e.g. webpack) in order to build the meteor app.
if [ -e "$BUILD_DIR"/package.json ]; then
  $METEOR_NPM install
fi

# Now on to bundling. Don't put the bundle in $APP_CHECKOUT_DIR during
# bundling, or it will recurse, trying to bundle up its own bundling.

status "Building Meteor app"
BUNDLE_DEST=`mktemp -d "$BP_DIR/build-XXXX"`

# The actual invocation of `meteor build`!
HOME=$METEOR_DIR $METEOR build --server http://localhost:3000 $SERVER_ONLY_FLAG --directory $BUNDLE_DEST

status "Moving built slug to $COMPILE_DIR/app"
mv $BUNDLE_DEST/bundle "$COMPILE_DIR/app"
rmdir $BUNDLE_DEST

# Run npm install on the built slug; only for `--production` dependencies.
status "Installing npm production dependencies on built slug"
if [ -e "$COMPILE_DIR"/app/programs/server/package.json ]; then
  cd "$COMPILE_DIR"/app/programs/server
  $METEOR_NPM install --production
  cd "$BUILD_DIR"
fi

#
# Environment
#
# Add an export of PATH which includes our compile dir, etc.
mkdir -p $BUILD_DIR/.vendor

#copy jq to be used at runtime
cp $BP_DIR/bin/jq $BUILD_DIR/.vendor/jq
chmod +x $BUILD_DIR/.vendor/jq

#copy the env.sh file to run on runtime
mkdir -p $BUILD_DIR/.profile.d
cp $BP_DIR/profile/* $BUILD_DIR/.profile.d/

cat > "$BUILD_DIR"/.profile.d/path.sh <<EOF
  #!/bin/sh
  export PATH=\$HOME/$COMPILE_DIR_SUFFIX/bin:\$PATH
  export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:\$HOME/$COMPILE_DIR_SUFFIX/lib
EOF

status "Checking for post_compile script"
if [ -f $BUILD_DIR/bin/post_compile ] ; then
    status "Running post_compile hook"
    chmod +x $BUILD_DIR/bin/post_compile
    $BUILD_DIR/bin/post_compile
fi
